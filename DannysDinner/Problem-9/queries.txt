-- If each $1 spent equates to 10 points and sushi has a 2x points multiplier â€” how many points would each customer have?

select s.customer_id, sum(
  case when s.product_id=1 
        then m.price * 20
  else m.price * 10
end) as total_points from sales s , menu m 
where s.product_id=m.product_id
group by s.customer_id ;



import org.apache.spark.sql.functions._
import org.apache.spark.sql.types.IntegerType

val sales = Seq(("A", "2021-01-01", "1"),("A", "2021-01-01", "2"),("A","2021-01-07", "2"),("A", "2021-01-10", "3"),("A", "2021-01-11", "3"),("A","2021-01-11", "3"),("B", "2021-01-01", "2"),("B", "2021-01-02", "2"),("B","2021-01-04", "1"),("B", "2021-01-11", "1"),("B", "2021-01-16", "3"),("B","2021-02-01", "3"),("C", "2021-01-01", "3"),("C", "2021-01-01", "3"),("C","2021-01-07", "3")).toDF("customer_id","order_date","product_id")
val menu = Seq( ("1", "sushi", "10"),("2", "curry", "15"), ("3", "ramen","12")).toDF("product_id","product_name","price").withColumn("price",col("price").cast(IntegerType)).withColumnRenamed("product_id", "product_id_menu")

sales.join(menu, sales("product_id") === menu("product_id_menu"))
.withColumn("total_points", 
  when(col("product_id") === 1, col("price") * 20)
  .otherwise(col("price") * 10))
.groupBy("customer_id")
.agg(sum("total_points")).show(false)
