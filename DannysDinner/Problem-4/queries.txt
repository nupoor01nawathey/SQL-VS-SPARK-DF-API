-- Which item was the most popular for each
customer?
select order_count,product_name,customer_id from
(select count(m.product_id) as order_count,
product_name, s.customer_id,
dense_rank() over(partition by s.customer_id order by count(s.customer_id) desc) drnk
from sales s, menu m
where m.product_id=s.product_id
group by s.customer_id, product_name ) tmp where
tmp.drnk=1;


import org.apache.spark.sql.functions._
import org.apache.spark.sql.types.IntegerType
val sales = Seq(("A", "2021-01-01", "1"),("A","2021-01-01", "2"),("A", "2021-01-07", "2"),("A","2021-01-10", "3"),("A", "2021-01-11", "3"),("A","2021-01-11", "3"),("B", "2021-01-01", "2"),("B","2021-01-02", "2"),("B", "2021-01-04", "1"),("B","2021-01-11", "1"),("B", "2021-01-16", "3"),("B","2021-02-01", "3"),("C", "2021-01-01", "3"),("C","2021-01-01", "3"),("C", "2021-01-07","3")).toDF("customer_id","order_date","product_id")

val menu = Seq( ("1", "sushi", "10"),("2", "curry", "15"),
("3", "ramen","12")).toDF("product_id","product_name","price").withColumn("price",col("price").cast(IntegerType)).withColumnRenamed("product_id","product_id_menu")

sales.join(menu,sales("product_id") === menu("product_id_menu"))
.groupBy("product_name","customer_id")
.agg(count("product_id").alias("order_count"))
.withColumn("dense_rank",dense_rank.over(Window.partitionBy("customer_id").orderBy($"order_count".desc)))
.filter(col("dense_rank") === 1)
.select("product_name","customer_id","order_count")
.show(false)
