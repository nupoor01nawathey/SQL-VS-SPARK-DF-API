-- What is the total items and amount spent for each member before they became a member?
select s.customer_id,count(distinct s.product_id) as total_unique_item,
sum(m.price) as total_price
from sales s join menu m
on s.product_id=m.product_id
join members mem on
s.customer_id=mem.customer_id
where s.order_date < mem.join_date
group by s.customer_id ;




import org.apache.spark.sql.functions._
import org.apache.spark.sql.types.IntegerType

val sales = Seq(("A", "2021-01-01", "1"),("A", "2021-01-01", "2"),("A","2021-01-07", "2"),("A", "2021-01-10", "3"),("A", "2021-01-11", "3"),("A","2021-01-11", "3"),("B", "2021-01-01", "2"),("B", "2021-01-02", "2"),("B","2021-01-04", "1"),("B", "2021-01-11", "1"),("B", "2021-01-16", "3"),("B","2021-02-01", "3"),("C", "2021-01-01", "3"),("C", "2021-01-01", "3"),("C","2021-01-07", "3")).toDF("customer_id","order_date","product_id")
val menu = Seq( ("1", "sushi", "10"),("2", "curry", "15"), ("3", "ramen","12")).toDF("product_id","product_name","price").withColumn("price",col("price").cast(IntegerType)).withColumnRenamed("product_id", "product_id_menu")
val members = Seq(("A", "2021-01-07"), ("B","2021-01-09")).toDF("customer_id","join_date").withColumnRenamed("customer_id","customer_id_mem")

sales.join(members,sales("customer_id") === members("customer_id_mem"))
.filter(col("order_date") < col("join_date"))
.join(menu,sales("product_id") === menu("product_id_menu"))
.groupBy("customer_id")
.agg(countDistinct("product_id").as("total_unique_item"),sum("price").as("total_price"))
.select("customer_id","total_unique_item","total_price").show(false)
